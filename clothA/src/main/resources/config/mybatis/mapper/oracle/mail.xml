<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="config.mybatis.mapper.oracle.mail">

	<sql id="searchWhere">
		<if test="searchKeyword !=null and searchKeyword !=''">
			and ${searchCondition} like '%' || #{searchKeyword} || '%'
		</if>
	</sql>
	
	
	<insert id="insertMail" parameterType="mailVo">
			<selectKey order="BEFORE" keyProperty="mailNo" resultType="int"  >
				select log_seq.nextval from dual
			</selectKey>
		insert into mail(mail_no,sender,mail_content,mail_file,mail_name)
		values(#{mailNo},#{sender},#{mailContent},#{mailFile},#{mailName})
	</insert>
	
	<insert id="insertGet" parameterType="mailVo">
		insert into get_mail(get_mail_pk,mail_no,emp_no)
		values(get_mail_seq.nextval,#{mailNo},#{empNo})
	</insert>
	
	<select id="selectGetMail" parameterType="SearchVO" resultType="mailVo">
		select *
		from
		(
			select rownum as RNUM, list.*
		    from (
				select m.* , e.emp_name
				from mailview m join employee e
				on m.sender = e.emp_no
				where m.emp_no = #{empNo} and m.get_mail_del = 'N' and m.get_mail_save is null 
				<include refid="searchWhere"></include>
				order by m.mail_no desc
			)list
		)
		<![CDATA[
		where RNUM>#{firstRecordIndex} 
		and RNUM<=#{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<select id="selectDetail" parameterType="mailVo" resultType="mailVo" >
		select m.* , e.emp_name
		from mailview m join employee e
		on m.sender = e.emp_no
		where m.mail_no = #{mailNo} and m.emp_no = #{empNo}
		order by m.mail_no desc
	</select>
	
	<update id="mailRead" parameterType="mailVo">
		update mailview set get_mail_read='Y' where emp_no = #{empNo} and mail_no = #{mailNo}
	</update>
	
	<update id="deleteMail" parameterType="mailVo">
		update get_mail set get_mail_del = 'Y' where mail_no=#{mailNo} and emp_no = #{empNo}
	</update>
	
	<select id="selectSender" parameterType="map" resultType="mailVo" >
		select *
		from
		(
			select rownum as RNUM, list.*
		    from (
				select * from mail
				where sender = #{empNo} and mail_save is null and mail_senderdel = 'N'
				<include refid="searchWhere"></include>
			)list
		)
		<![CDATA[
		where RNUM>#{firstRecordIndex} 
		and RNUM<=#{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<select id="sendMailDetail" parameterType="int" resultType="mailVo" >
		select * from mail where mail_no = #{mailNo}
	</select>
	
	<select id="sendEmpNO" parameterType="int" resultType="mailVo" >
		select g.*,e.EMP_NAME from 
		get_mail g join employee e
		on g.EMP_NO = e.EMP_NO 
		where g.mail_no = #{mailNo}
		order by g.mail_no desc
	</select>
	
	<update id="sendDelete" parameterType="int">
		update mail set mail_senderdel = 'Y' where mail_no=#{mailNo}
	</update>
	
	<update id="sendMulti" parameterType="map">
		update mail set mail_senderdel = 'Y'
		where mail_no in 
		<foreach item="mailNo" collection="nos" open="(" close=")" separator=","
			index="index">
			#{mailNo}
		</foreach>
	</update>
	
	<update id="getMulti" parameterType="map">
		update get_mail set get_mail_del = 'Y'
		where emp_no = #{empNo} and mail_no in 
		<foreach item="mailNo" collection="nos" open="(" close=")" separator=","
			index="index">
			#{mailNo}
		</foreach>
	</update>
	
	<select id="sendSave" parameterType="String" resultType="mailVo" >
		select *
		from (
			select * from mail
			where sender = #{sender} and mail_save is not null and mail_senderdel = 'N'
			order by mail_no desc
		)
		<![CDATA[
		where rownum<=5
		]]>
	</select>
	
	<select id="getSave" parameterType="String" resultType="mailVo" >
		select *
		from (
			select m.* , e.emp_name
			from mailview m join employee e
			on m.sender = e.emp_no
			where m.emp_no = #{empNo} and m.get_mail_save is not null and m.get_mail_del = 'N'
			order by m.mail_no desc
		)
		<![CDATA[
		where rownum<=5
		]]>
	</select>
	
	<update id="getSaveUp" parameterType="map">
		update get_mail set get_mail_save = 'YES'
		where emp_no = #{empNo} and mail_no in
		<foreach item="mailNo" collection="nos" open="(" close=")" separator=","
			index="index">
			#{mailNo}
		</foreach>
	</update>
	
	<update id="sendSaveUp" parameterType="map">
		update mail set mail_save = 'YES'
		where sender = #{sender} and mail_no in
		<foreach item="mailNo" collection="nos" open="(" close=")" separator=","
			index="index">
			#{mailNo}
		</foreach>
	</update>
	
	<select id="getTotalRecord" parameterType="map" resultType="int">
		select count(*)
		from mailview m join employee e
		on m.sender = e.emp_no
		where m.emp_no = #{empNo} and m.get_mail_del = 'N' and m.get_mail_save is null 
		<include refid="searchWhere"></include>
		order by m.mail_no desc		
	</select>
	
	<select id="getTotalRecord1" parameterType="map" resultType="int">
		select count(*)
		from mailview m join employee e
		on m.sender = e.emp_no
		where m.emp_no = #{empNo} and m.get_mail_del = 'N' and m.get_mail_save is not null 
		<include refid="searchWhere"></include>
		order by m.mail_no desc		
	</select>
	
	<select id="sendTotalRecord" parameterType="map" resultType="int">
		select count(*) 
		from mailview m
			<if test="searchKeyword !=null and searchKeyword !=''">
				join employee e 
				on m.emp_no = e.emp_no
			</if>
		where m.sender = #{empNo} and m.mail_senderdel = 'N' and m.mail_save is null
		<include refid="searchWhere"></include>
		order by mail_no desc
	</select>
	
	<select id="sendTotalRecord1" parameterType="map" resultType="int">
		select count(*) 
		from mailview m
			<if test="searchKeyword !=null and searchKeyword !=''">
				join employee e 
				on m.emp_no = e.emp_no
			</if>
		where m.sender = #{empNo} and m.mail_senderdel = 'N' and m.mail_save is not null
		<include refid="searchWhere"></include>
		order by mail_no desc
	</select>
	
	<select id="searchName" parameterType="map" resultType="mailVO" >
		select m.*, e.EMP_NAME from 
		mailview m join employee e
		on m.EMP_NO = e.EMP_NO
		where sender = #{empNo} and mail_save is null and mail_senderdel = 'N'
		<include refid="searchWhere"></include>
		order by mail_no desc
	</select>
	
	<select id="searchName1" parameterType="map" resultType="mailVO" >
		select m.*, e.EMP_NAME from 
		mailview m join employee e
		on m.EMP_NO = e.EMP_NO
		where sender = #{empNo} and mail_save is not null and mail_senderdel = 'N'
		<include refid="searchWhere"></include>
		order by mail_no desc
	</select>
	
	<select id="saveSenderTR" resultType="int" parameterType="string" >
		select count(*) from mailview
		where sender = #{sender} and mail_save is not null and mail_senderdel = 'N'
	</select>
	
	<select id="saveGetTR" resultType="int" parameterType="string" >
		select count(*) from mailview
		where emp_no = #{empNo} and get_mail_save is not null and get_mail_del = 'N'
	</select>
	
	<select id="saveGetL" parameterType="searchVo" resultType="mailVo">
		select *
		from
		(
			select rownum as RNUM, list.*
		    from (
				select m.* , e.emp_name
				from mailview m join employee e
				on m.sender = e.emp_no
				where m.emp_no = #{empNo} and m.get_mail_del = 'N' and m.get_mail_save is not null 
				<include refid="searchWhere"></include>
				order by m.mail_no desc
			)list
		)
		<![CDATA[
		where RNUM>#{firstRecordIndex} 
		and RNUM<=#{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<select id="saveSendL" parameterType="map" resultType="mailVo" >
		select *
		from
		(
			select rownum as RNUM, list.*
		    from (
				select * from mail
				where sender = #{empNo} and mail_save is not null and mail_senderdel = 'N'
				<include refid="searchWhere"></include>
			)list
		)
		<![CDATA[
		where RNUM>#{firstRecordIndex} 
		and RNUM<=#{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
</mapper>









